//
//  Owl
//  A declarative type-safe framework for building fast and flexible list with Tables & Collections
//
//  Created by Daniele Margutti
//   - Web: https://www.danielemargutti.com
//   - Twitter: https://twitter.com/danielemargutti
//   - Mail: hello@danielemargutti.com
//
//  Copyright Â© 2019 Daniele Margutti. Licensed under Apache 2.0 License.
//

import UIKit

// MARK: - TableAdapterCellAction -

/// Action to perform at the end of the selection.
///
/// - none: don't change the state.
/// - deselect: deselect without animation.
/// - deselectAnimated: deselect with animation.
public enum TableAdapterCellAction {
	case none
	case deselect
	case deselectAnimated
}

public extension TableCellAdapter {

	// MARK: - TableAdapter.Event -

	// Event generated by a single `TableAdapter`. It contains all the necessary informations
	// statically typed to make actions with the event itself.
	class Event {

		// Related table.
        public var table: UITableView? {
            guard let cell = (cell as? UITableViewCell),
                let table = cell.superview as? UITableView else {
                    return nil
            }
            return table
        }
        
        /// Managed source table's bounds size
        public var tableSize: CGSize? {
            return table?.bounds.size
        }

		// Source index path, if available.
		public let indexPath: IndexPath?

		// Target element of the event.
		public let element: Model?

		// Target static typed cell if available.
		// This value maybe `nil` if, at the time of the request, no cell is contextually associable with the event.
		public var cell: Cell?

		internal init(item: Any? = nil, cell: Any? = nil, indexPath: IndexPath? = nil) {
			self.element = item as? Model
			self.cell = cell as? Cell
			self.indexPath = indexPath
		}

	}

	// MARK: - EventsSubscriber -

	// This call is the entry point to setup actions for events generated for `TableAdapter`.
	class EventsSubscriber {
		public var dequeue : ((Event) -> ())? = nil
		public var willDisplay: ((Event) -> Void)? = nil

		public var rowHeight: ((Event) -> CGFloat)? = nil
		public var rowHeightEstimated: ((Event) -> CGFloat)? = nil

		public var canEditRow: ((Event) -> Bool)? = nil
		public var commitEdit: ((_ ctx: Event, _ commit: UITableViewCell.EditingStyle) -> Void)? = nil
		public var editActions: ((Event) -> [UITableViewRowAction]?)? = nil

		public var canMoveRow: ((Event) -> Bool)? = nil
		public var moveRow: ((_ ctx: Event, _ dest: IndexPath) -> Void)? = nil
		
		public var indentLevel: ((Event) -> Int)? = nil
		
		public var prefetch: ((_ items: [Model], _ paths: [IndexPath]) -> Void)? = nil
		public var cancelPrefetch: ((_ models: [Model], _ paths: [IndexPath]) -> Void)? = nil

		public var shouldSpringLoad: ((Event) -> Bool)? = nil
		public var tapOnAccessory: ((Event) -> Void)? = nil

        public var willSelect: ((Event) -> IndexPath?)? = { $0.indexPath }
		public var didSelect: ((Event) -> TableAdapterCellAction)? = nil
		public var willDeselect: ((Event) -> IndexPath?)? = { $0.indexPath }
		public var didDeselect: ((Event) -> IndexPath?)? = nil

		public var willBeginEdit: ((Event) -> Void)? = nil
		public var didEndEdit: ((Event) -> Void)? = nil
		public var editStyle: ((Event) -> UITableViewCell.EditingStyle)? = nil
		public var deleteConfirmTitle: ((Event) -> String?)? = nil
		public var editShouldIndent: ((Event) -> Bool)? = nil

		public var moveAdjustDestination: ((_ ctx: Event, _ proposed: IndexPath) -> IndexPath?)? = nil

		public var endDisplay: ((Event) -> Void)? = nil

		public var shouldShowMenu: ((Event) -> Bool)? = nil
		public var canPerformMenuAction: ((_ ctx: Event, _ sel: Selector, _ sender: Any?) -> Bool)? = nil
		public var performMenuAction: ((_ ctx: Event, _ sel: Selector, _ sender: Any?) -> Void)? = nil

		public var shouldHighlight: ((Event) -> Bool)? = nil
		public var didHighlight: ((Event) -> Void)? = nil
		public var didUnhighlight: ((Event) -> Void)? = nil

		public var canFocus: ((Event) -> Bool)? = nil

		@available(iOS 11, *)
		public lazy var leadingSwipeActions: ((Event) -> UISwipeActionsConfiguration?)? = nil

		@available(iOS 11, *)
		public lazy var trailingSwipeActions: ((Event) -> UISwipeActionsConfiguration?)? = nil
	}
}


// MARK: - TableAdapterEventID -

// Inner generated event. You should never use it.
public enum TableAdapterEventID: Int {
	case dequeue = 0
	case canEditRow
	case commitEdit
	case canMoveRow
	case moveRow
	case prefetch
	case cancelPrefetch
	case rowHeight
	case rowHeightEstimated
	case indentLevel
	case willDisplay
	case shouldSpringLoad
	case editActions
	case tapOnAccessory
	case willSelect
	case tap
	case willDeselect
	case didDeselect
	case willBeginEdit
	case didEndEdit
	case editStyle
	case deleteConfirmTitle
	case editShouldIndent
	case moveAdjustDestination
	case endDisplay
	case shouldShowMenu
	case canPerformMenuAction
	case performMenuAction
	case shouldHighlight
	case didHighlight
	case didUnhighlight
	case canFocus
	case leadingSwipeActions
	case trailingSwipeActions
}
